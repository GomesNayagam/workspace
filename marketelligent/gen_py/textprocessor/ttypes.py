#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class DialogType:
  whQuestion = 1
  ynQuestion = 2
  Emphasis = 3
  Statement = 4
  Other = 5

  _VALUES_TO_NAMES = {
    1: "whQuestion",
    2: "ynQuestion",
    3: "Emphasis",
    4: "Statement",
    5: "Other",
  }

  _NAMES_TO_VALUES = {
    "whQuestion": 1,
    "ynQuestion": 2,
    "Emphasis": 3,
    "Statement": 4,
    "Other": 5,
  }


class DateTime:
  """
  Attributes:
   - Year
   - Month
   - Day
   - Hour
   - Minute
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'Year', None, None, ), # 1
    (2, TType.I16, 'Month', None, None, ), # 2
    (3, TType.I16, 'Day', None, None, ), # 3
    (4, TType.I16, 'Hour', None, 0, ), # 4
    (5, TType.I16, 'Minute', None, 0, ), # 5
  )

  def __init__(self, Year=None, Month=None, Day=None, Hour=thrift_spec[4][4], Minute=thrift_spec[5][4],):
    self.Year = Year
    self.Month = Month
    self.Day = Day
    self.Hour = Hour
    self.Minute = Minute

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.Year = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.Month = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.Day = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.Hour = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.Minute = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DateTime')
    if self.Year is not None:
      oprot.writeFieldBegin('Year', TType.I16, 1)
      oprot.writeI16(self.Year)
      oprot.writeFieldEnd()
    if self.Month is not None:
      oprot.writeFieldBegin('Month', TType.I16, 2)
      oprot.writeI16(self.Month)
      oprot.writeFieldEnd()
    if self.Day is not None:
      oprot.writeFieldBegin('Day', TType.I16, 3)
      oprot.writeI16(self.Day)
      oprot.writeFieldEnd()
    if self.Hour is not None:
      oprot.writeFieldBegin('Hour', TType.I16, 4)
      oprot.writeI16(self.Hour)
      oprot.writeFieldEnd()
    if self.Minute is not None:
      oprot.writeFieldBegin('Minute', TType.I16, 5)
      oprot.writeI16(self.Minute)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimeValues:
  """
  Attributes:
   - sentence
   - dates
   - timeexpr_exists
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sentence', None, None, ), # 1
    (2, TType.LIST, 'dates', (TType.STRING,None), None, ), # 2
    (3, TType.BOOL, 'timeexpr_exists', None, None, ), # 3
  )

  def __init__(self, sentence=None, dates=None, timeexpr_exists=None,):
    self.sentence = sentence
    self.dates = dates
    self.timeexpr_exists = timeexpr_exists

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sentence = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.dates = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.dates.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.timeexpr_exists = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimeValues')
    if self.sentence is not None:
      oprot.writeFieldBegin('sentence', TType.STRING, 1)
      oprot.writeString(self.sentence)
      oprot.writeFieldEnd()
    if self.dates is not None:
      oprot.writeFieldBegin('dates', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.dates))
      for iter6 in self.dates:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.timeexpr_exists is not None:
      oprot.writeFieldBegin('timeexpr_exists', TType.BOOL, 3)
      oprot.writeBool(self.timeexpr_exists)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
